From a0532c147d0f725bb4dd84616243ce014426eaa0 Mon Sep 17 00:00:00 2001
From: "Richard W.M. Jones" <rjones@redhat.com>
Date: Tue, 9 Aug 2016 22:14:43 +0100
Subject: [PATCH] Update riscv_regs for ptrace.h from Linux 4.1.x.

---
 syscall.c | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/syscall.c b/syscall.c
index 0b7ba64..88ed9ba 100644
--- a/syscall.c
+++ b/syscall.c
@@ -1571,7 +1571,7 @@ get_scno(struct tcb *tcp)
 # elif defined(ARC)
 	scno = arc_regs.scratch.r8;
 #elif defined(RISCV)
-        scno = riscv_regs.a7;
+        scno = riscv_regs.a[7];
 #endif
 
 	tcp->scno = scno;
@@ -1967,12 +1967,12 @@ get_syscall_args(struct tcb *tcp)
 		tcp->u_arg[i] = *arc_args--;
 
 #elif defined(RISCV)
-        tcp->u_arg[0] = riscv_regs.a0;
-        tcp->u_arg[1] = riscv_regs.a1;
-        tcp->u_arg[2] = riscv_regs.a2;
-        tcp->u_arg[3] = riscv_regs.a3;
-        tcp->u_arg[4] = riscv_regs.a4;
-        tcp->u_arg[5] = riscv_regs.a5;
+        tcp->u_arg[0] = riscv_regs.a[0];
+        tcp->u_arg[1] = riscv_regs.a[1];
+        tcp->u_arg[2] = riscv_regs.a[2];
+        tcp->u_arg[3] = riscv_regs.a[3];
+        tcp->u_arg[4] = riscv_regs.a[4];
+        tcp->u_arg[5] = riscv_regs.a[5];
 #else /* Other architecture (32bits specific) */
 	for (i = 0; i < nargs; ++i)
 		if (upeek(tcp->pid, i*4, &tcp->u_arg[i]) < 0)
@@ -2496,11 +2496,11 @@ get_error(struct tcb *tcp)
 		tcp->u_rval = arc_regs.scratch.r0;
 	}
 #elif defined(RISCV)
-        if (check_errno && is_negated_errno(riscv_regs.a0)) {
+        if (check_errno && is_negated_errno(riscv_regs.a[0])) {
             tcp->u_rval = -1;
-            u_error = -riscv_regs.a0;
+            u_error = -riscv_regs.a[0];
         } else {
-            tcp->u_rval = riscv_regs.a0;
+            tcp->u_rval = riscv_regs.a[0];
         }
 #endif
 	tcp->u_error = u_error;
-- 
2.7.4

